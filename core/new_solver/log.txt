
running 1 test
2025-09-08T11:47:36.031481Z TRACE pod2_new_solver::engine: dequeued frame frame_id=0 goals=1 export=true
2025-09-08T11:47:36.032302Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even")
2025-09-08T11:47:36.032326Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 1 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }]
2025-09-08T11:47:36.032334Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.032341Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 1 }), args: [Wildcard(Wildcard { name: "N", index: 1 })] }]
2025-09-08T11:47:36.032352Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.032364Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("even", [Some(RawOrdValue(Value { typed: Int(4), raw: RawValue([4, 0, 0, 0]) }))])
2025-09-08T11:47:36.032725Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=0
2025-09-08T11:47:36.032730Z TRACE pod2_new_solver::engine: dequeued frame frame_id=2 goals=1 export=false
2025-09-08T11:47:36.032939Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even_step")
2025-09-08T11:47:36.032950Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even_step") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 0 }), args: [Wildcard(Wildcard { name: "N", index: 1 }), Wildcard(Wildcard { name: "M", index: 2 })] }, StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 3 }), args: [Wildcard(Wildcard { name: "M", index: 2 })] }]
2025-09-08T11:47:36.032969Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.032972Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("even_step", [Some(RawOrdValue(Value { typed: Int(4), raw: RawValue([4, 0, 0, 0]) }))])
2025-09-08T11:47:36.032988Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=2
2025-09-08T11:47:36.032991Z TRACE pod2_new_solver::engine: dequeued frame frame_id=3 goals=2 export=false
2025-09-08T11:47:36.033007Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("dec")
2025-09-08T11:47:36.033015Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("dec") goals=[StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 1 }), Wildcard(Wildcard { name: "B", index: 2 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }]
2025-09-08T11:47:36.033020Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.033022Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(4), raw: RawValue([4, 0, 0, 0]) })), None])
2025-09-08T11:47:36.033038Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=3
2025-09-08T11:47:36.033041Z TRACE pod2_new_solver::engine: dequeued frame frame_id=4 goals=1 export=false
2025-09-08T11:47:36.033044Z TRACE pod2_new_solver::engine: processing native goal pred=SumOf args=[Wildcard(Wildcard { name: "A", index: 1 }), Wildcard(Wildcard { name: "B", index: 2 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })]
2025-09-08T11:47:36.033049Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.033231Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.033240Z TRACE pod2_new_solver::engine: native goal outcome pred=SumOf choices=2 waits={2}
2025-09-08T11:47:36.033290Z TRACE pod2_new_solver::engine: dequeued frame frame_id=5 goals=0 export=false
2025-09-08T11:47:36.033312Z DEBUG pod2_new_solver::engine: inserted/extended table answer with new proof tag pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(4), raw: RawValue([4, 0, 0, 0]) })), None])
2025-09-08T11:47:36.033321Z TRACE pod2_new_solver::engine: delivering answer to waiter pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(4), raw: RawValue([4, 0, 0, 0]) })), None])
2025-09-08T11:47:36.033335Z DEBUG pod2_new_solver::engine: table marked complete and waiters pruned pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(4), raw: RawValue([4, 0, 0, 0]) })), None])
2025-09-08T11:47:36.033339Z TRACE pod2_new_solver::engine: dequeued frame frame_id=6 goals=1 export=true
2025-09-08T11:47:36.033374Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("odd")
2025-09-08T11:47:36.033383Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("odd") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 0 }), args: [Wildcard(Wildcard { name: "N", index: 2 }), Wildcard(Wildcard { name: "M", index: 3 })] }, StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 2 }), args: [Wildcard(Wildcard { name: "M", index: 3 })] }]
2025-09-08T11:47:36.033396Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.033398Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("odd", [Some(RawOrdValue(Value { typed: Int(3), raw: RawValue([3, 0, 0, 0]) }))])
2025-09-08T11:47:36.033443Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=6
2025-09-08T11:47:36.033446Z TRACE pod2_new_solver::engine: dequeued frame frame_id=7 goals=2 export=false
2025-09-08T11:47:36.033461Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("dec")
2025-09-08T11:47:36.033470Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("dec") goals=[StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 2 }), Wildcard(Wildcard { name: "B", index: 3 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }]
2025-09-08T11:47:36.033474Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.033476Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(3), raw: RawValue([3, 0, 0, 0]) })), None])
2025-09-08T11:47:36.033492Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=7
2025-09-08T11:47:36.033495Z TRACE pod2_new_solver::engine: dequeued frame frame_id=8 goals=1 export=false
2025-09-08T11:47:36.033497Z TRACE pod2_new_solver::engine: processing native goal pred=SumOf args=[Wildcard(Wildcard { name: "A", index: 2 }), Wildcard(Wildcard { name: "B", index: 3 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })]
2025-09-08T11:47:36.033502Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.033509Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.033515Z TRACE pod2_new_solver::engine: native goal outcome pred=SumOf choices=2 waits={3}
2025-09-08T11:47:36.033528Z TRACE pod2_new_solver::engine: dequeued frame frame_id=9 goals=0 export=false
2025-09-08T11:47:36.033573Z DEBUG pod2_new_solver::engine: inserted/extended table answer with new proof tag pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(3), raw: RawValue([3, 0, 0, 0]) })), None])
2025-09-08T11:47:36.033582Z TRACE pod2_new_solver::engine: delivering answer to waiter pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(3), raw: RawValue([3, 0, 0, 0]) })), None])
2025-09-08T11:47:36.033595Z DEBUG pod2_new_solver::engine: table marked complete and waiters pruned pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(3), raw: RawValue([3, 0, 0, 0]) })), None])
2025-09-08T11:47:36.033599Z TRACE pod2_new_solver::engine: dequeued frame frame_id=10 goals=1 export=true
2025-09-08T11:47:36.033644Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even")
2025-09-08T11:47:36.033653Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 3 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }]
2025-09-08T11:47:36.033656Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.033663Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 1 }), args: [Wildcard(Wildcard { name: "N", index: 3 })] }]
2025-09-08T11:47:36.033675Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.033677Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("even", [Some(RawOrdValue(Value { typed: Int(2), raw: RawValue([2, 0, 0, 0]) }))])
2025-09-08T11:47:36.033723Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=10
2025-09-08T11:47:36.033726Z TRACE pod2_new_solver::engine: dequeued frame frame_id=12 goals=1 export=false
2025-09-08T11:47:36.033761Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even_step")
2025-09-08T11:47:36.033769Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even_step") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 0 }), args: [Wildcard(Wildcard { name: "N", index: 3 }), Wildcard(Wildcard { name: "M", index: 4 })] }, StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 3 }), args: [Wildcard(Wildcard { name: "M", index: 4 })] }]
2025-09-08T11:47:36.033781Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.033783Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("even_step", [Some(RawOrdValue(Value { typed: Int(2), raw: RawValue([2, 0, 0, 0]) }))])
2025-09-08T11:47:36.033819Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=12
2025-09-08T11:47:36.033822Z TRACE pod2_new_solver::engine: dequeued frame frame_id=13 goals=2 export=false
2025-09-08T11:47:36.033837Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("dec")
2025-09-08T11:47:36.033845Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("dec") goals=[StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 3 }), Wildcard(Wildcard { name: "B", index: 4 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }]
2025-09-08T11:47:36.033849Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.033851Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(2), raw: RawValue([2, 0, 0, 0]) })), None])
2025-09-08T11:47:36.033868Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=13
2025-09-08T11:47:36.033871Z TRACE pod2_new_solver::engine: dequeued frame frame_id=14 goals=1 export=false
2025-09-08T11:47:36.033874Z TRACE pod2_new_solver::engine: processing native goal pred=SumOf args=[Wildcard(Wildcard { name: "A", index: 3 }), Wildcard(Wildcard { name: "B", index: 4 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })]
2025-09-08T11:47:36.033879Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.033889Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.033896Z TRACE pod2_new_solver::engine: native goal outcome pred=SumOf choices=2 waits={4}
2025-09-08T11:47:36.033910Z TRACE pod2_new_solver::engine: dequeued frame frame_id=15 goals=0 export=false
2025-09-08T11:47:36.033988Z DEBUG pod2_new_solver::engine: inserted/extended table answer with new proof tag pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(2), raw: RawValue([2, 0, 0, 0]) })), None])
2025-09-08T11:47:36.033997Z TRACE pod2_new_solver::engine: delivering answer to waiter pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(2), raw: RawValue([2, 0, 0, 0]) })), None])
2025-09-08T11:47:36.034011Z DEBUG pod2_new_solver::engine: table marked complete and waiters pruned pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(2), raw: RawValue([2, 0, 0, 0]) })), None])
2025-09-08T11:47:36.034015Z TRACE pod2_new_solver::engine: dequeued frame frame_id=16 goals=1 export=true
2025-09-08T11:47:36.034100Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("odd")
2025-09-08T11:47:36.034109Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("odd") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 0 }), args: [Wildcard(Wildcard { name: "N", index: 4 }), Wildcard(Wildcard { name: "M", index: 5 })] }, StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 2 }), args: [Wildcard(Wildcard { name: "M", index: 5 })] }]
2025-09-08T11:47:36.034119Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.034121Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("odd", [Some(RawOrdValue(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) }))])
2025-09-08T11:47:36.034212Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=16
2025-09-08T11:47:36.034215Z TRACE pod2_new_solver::engine: dequeued frame frame_id=17 goals=2 export=false
2025-09-08T11:47:36.034232Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("dec")
2025-09-08T11:47:36.034243Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("dec") goals=[StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 4 }), Wildcard(Wildcard { name: "B", index: 5 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }]
2025-09-08T11:47:36.034247Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.034250Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })), None])
2025-09-08T11:47:36.034267Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=17
2025-09-08T11:47:36.034271Z TRACE pod2_new_solver::engine: dequeued frame frame_id=18 goals=1 export=false
2025-09-08T11:47:36.034274Z TRACE pod2_new_solver::engine: processing native goal pred=SumOf args=[Wildcard(Wildcard { name: "A", index: 4 }), Wildcard(Wildcard { name: "B", index: 5 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })]
2025-09-08T11:47:36.034279Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.034289Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.034297Z TRACE pod2_new_solver::engine: native goal outcome pred=SumOf choices=2 waits={5}
2025-09-08T11:47:36.034311Z TRACE pod2_new_solver::engine: dequeued frame frame_id=19 goals=0 export=false
2025-09-08T11:47:36.034438Z DEBUG pod2_new_solver::engine: inserted/extended table answer with new proof tag pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })), None])
2025-09-08T11:47:36.034449Z TRACE pod2_new_solver::engine: delivering answer to waiter pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })), None])
2025-09-08T11:47:36.034466Z DEBUG pod2_new_solver::engine: table marked complete and waiters pruned pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })), None])
2025-09-08T11:47:36.034470Z TRACE pod2_new_solver::engine: dequeued frame frame_id=20 goals=1 export=true
2025-09-08T11:47:36.034544Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even")
2025-09-08T11:47:36.034552Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 5 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }]
2025-09-08T11:47:36.034556Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.034563Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 1 }), args: [Wildcard(Wildcard { name: "N", index: 5 })] }]
2025-09-08T11:47:36.034572Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.034574Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("even", [Some(RawOrdValue(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) }))])
2025-09-08T11:47:36.034651Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=20
2025-09-08T11:47:36.034654Z TRACE pod2_new_solver::engine: dequeued frame frame_id=22 goals=1 export=false
2025-09-08T11:47:36.034752Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even_step")
2025-09-08T11:47:36.034762Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even_step") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 0 }), args: [Wildcard(Wildcard { name: "N", index: 5 }), Wildcard(Wildcard { name: "M", index: 6 })] }, StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 3 }), args: [Wildcard(Wildcard { name: "M", index: 6 })] }]
2025-09-08T11:47:36.034775Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.034778Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("even_step", [Some(RawOrdValue(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) }))])
2025-09-08T11:47:36.034849Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=22
2025-09-08T11:47:36.034853Z TRACE pod2_new_solver::engine: dequeued frame frame_id=23 goals=2 export=false
2025-09-08T11:47:36.034880Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("dec")
2025-09-08T11:47:36.034890Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("dec") goals=[StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 5 }), Wildcard(Wildcard { name: "B", index: 6 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }]
2025-09-08T11:47:36.034894Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.034896Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })), None])
2025-09-08T11:47:36.034925Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=23
2025-09-08T11:47:36.034929Z TRACE pod2_new_solver::engine: dequeued frame frame_id=24 goals=1 export=false
2025-09-08T11:47:36.034932Z TRACE pod2_new_solver::engine: processing native goal pred=SumOf args=[Wildcard(Wildcard { name: "A", index: 5 }), Wildcard(Wildcard { name: "B", index: 6 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })]
2025-09-08T11:47:36.034938Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.034949Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.034957Z TRACE pod2_new_solver::engine: native goal outcome pred=SumOf choices=2 waits={6}
2025-09-08T11:47:36.034971Z TRACE pod2_new_solver::engine: dequeued frame frame_id=25 goals=0 export=false
2025-09-08T11:47:36.035205Z DEBUG pod2_new_solver::engine: inserted/extended table answer with new proof tag pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })), None])
2025-09-08T11:47:36.035220Z TRACE pod2_new_solver::engine: delivering answer to waiter pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })), None])
2025-09-08T11:47:36.035241Z DEBUG pod2_new_solver::engine: table marked complete and waiters pruned pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })), None])
2025-09-08T11:47:36.035246Z TRACE pod2_new_solver::engine: dequeued frame frame_id=26 goals=1 export=true
2025-09-08T11:47:36.035327Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("odd")
2025-09-08T11:47:36.035337Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("odd") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 0 }), args: [Wildcard(Wildcard { name: "N", index: 6 }), Wildcard(Wildcard { name: "M", index: 7 })] }, StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 2 }), args: [Wildcard(Wildcard { name: "M", index: 7 })] }]
2025-09-08T11:47:36.035351Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.035353Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("odd", [Some(RawOrdValue(Value { typed: Int(-1), raw: RawValue([4294967295, 4294967295, 0, 0]) }))])
2025-09-08T11:47:36.035448Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=26
2025-09-08T11:47:36.035452Z TRACE pod2_new_solver::engine: dequeued frame frame_id=27 goals=2 export=false
2025-09-08T11:47:36.035529Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("dec")
2025-09-08T11:47:36.035538Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("dec") goals=[StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 6 }), Wildcard(Wildcard { name: "B", index: 7 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }]
2025-09-08T11:47:36.035542Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.035544Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-1), raw: RawValue([4294967295, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.035629Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=27
2025-09-08T11:47:36.035633Z TRACE pod2_new_solver::engine: dequeued frame frame_id=28 goals=1 export=false
2025-09-08T11:47:36.035638Z TRACE pod2_new_solver::engine: processing native goal pred=SumOf args=[Wildcard(Wildcard { name: "A", index: 6 }), Wildcard(Wildcard { name: "B", index: 7 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })]
2025-09-08T11:47:36.035644Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.035656Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.035665Z TRACE pod2_new_solver::engine: native goal outcome pred=SumOf choices=2 waits={7}
2025-09-08T11:47:36.035679Z TRACE pod2_new_solver::engine: dequeued frame frame_id=29 goals=0 export=false
2025-09-08T11:47:36.036000Z DEBUG pod2_new_solver::engine: inserted/extended table answer with new proof tag pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-1), raw: RawValue([4294967295, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.036042Z TRACE pod2_new_solver::engine: delivering answer to waiter pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-1), raw: RawValue([4294967295, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.036092Z DEBUG pod2_new_solver::engine: table marked complete and waiters pruned pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-1), raw: RawValue([4294967295, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.036097Z TRACE pod2_new_solver::engine: dequeued frame frame_id=30 goals=1 export=true
2025-09-08T11:47:36.036167Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even")
2025-09-08T11:47:36.036178Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 7 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }]
2025-09-08T11:47:36.036182Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.036191Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 1 }), args: [Wildcard(Wildcard { name: "N", index: 7 })] }]
2025-09-08T11:47:36.036199Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.036201Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("even", [Some(RawOrdValue(Value { typed: Int(-2), raw: RawValue([4294967294, 4294967295, 0, 0]) }))])
2025-09-08T11:47:36.036274Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=30
2025-09-08T11:47:36.036280Z TRACE pod2_new_solver::engine: dequeued frame frame_id=32 goals=1 export=false
2025-09-08T11:47:36.036318Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even_step")
2025-09-08T11:47:36.036329Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even_step") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 0 }), args: [Wildcard(Wildcard { name: "N", index: 7 }), Wildcard(Wildcard { name: "M", index: 8 })] }, StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 3 }), args: [Wildcard(Wildcard { name: "M", index: 8 })] }]
2025-09-08T11:47:36.036340Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.036342Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("even_step", [Some(RawOrdValue(Value { typed: Int(-2), raw: RawValue([4294967294, 4294967295, 0, 0]) }))])
2025-09-08T11:47:36.036384Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=32
2025-09-08T11:47:36.036388Z TRACE pod2_new_solver::engine: dequeued frame frame_id=33 goals=2 export=false
2025-09-08T11:47:36.036473Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("dec")
2025-09-08T11:47:36.036484Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("dec") goals=[StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 7 }), Wildcard(Wildcard { name: "B", index: 8 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }]
2025-09-08T11:47:36.036488Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.036490Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-2), raw: RawValue([4294967294, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.036576Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=33
2025-09-08T11:47:36.036580Z TRACE pod2_new_solver::engine: dequeued frame frame_id=34 goals=1 export=false
2025-09-08T11:47:36.036583Z TRACE pod2_new_solver::engine: processing native goal pred=SumOf args=[Wildcard(Wildcard { name: "A", index: 7 }), Wildcard(Wildcard { name: "B", index: 8 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })]
2025-09-08T11:47:36.036590Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.036603Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.036613Z TRACE pod2_new_solver::engine: native goal outcome pred=SumOf choices=2 waits={8}
2025-09-08T11:47:36.036628Z TRACE pod2_new_solver::engine: dequeued frame frame_id=35 goals=0 export=false
2025-09-08T11:47:36.037046Z DEBUG pod2_new_solver::engine: inserted/extended table answer with new proof tag pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-2), raw: RawValue([4294967294, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.037088Z TRACE pod2_new_solver::engine: delivering answer to waiter pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-2), raw: RawValue([4294967294, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.037139Z DEBUG pod2_new_solver::engine: table marked complete and waiters pruned pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-2), raw: RawValue([4294967294, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.037143Z TRACE pod2_new_solver::engine: dequeued frame frame_id=36 goals=1 export=true
2025-09-08T11:47:36.037257Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("odd")
2025-09-08T11:47:36.037268Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("odd") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 0 }), args: [Wildcard(Wildcard { name: "N", index: 8 }), Wildcard(Wildcard { name: "M", index: 9 })] }, StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 2 }), args: [Wildcard(Wildcard { name: "M", index: 9 })] }]
2025-09-08T11:47:36.037282Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.037284Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("odd", [Some(RawOrdValue(Value { typed: Int(-3), raw: RawValue([4294967293, 4294967295, 0, 0]) }))])
2025-09-08T11:47:36.037400Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=36
2025-09-08T11:47:36.037404Z TRACE pod2_new_solver::engine: dequeued frame frame_id=37 goals=2 export=false
2025-09-08T11:47:36.037487Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("dec")
2025-09-08T11:47:36.037498Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("dec") goals=[StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 8 }), Wildcard(Wildcard { name: "B", index: 9 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }]
2025-09-08T11:47:36.037502Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.037504Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-3), raw: RawValue([4294967293, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.037592Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=37
2025-09-08T11:47:36.037596Z TRACE pod2_new_solver::engine: dequeued frame frame_id=38 goals=1 export=false
2025-09-08T11:47:36.037599Z TRACE pod2_new_solver::engine: processing native goal pred=SumOf args=[Wildcard(Wildcard { name: "A", index: 8 }), Wildcard(Wildcard { name: "B", index: 9 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })]
2025-09-08T11:47:36.037606Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.037620Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.037630Z TRACE pod2_new_solver::engine: native goal outcome pred=SumOf choices=2 waits={9}
2025-09-08T11:47:36.037646Z TRACE pod2_new_solver::engine: dequeued frame frame_id=39 goals=0 export=false
2025-09-08T11:47:36.038162Z DEBUG pod2_new_solver::engine: inserted/extended table answer with new proof tag pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-3), raw: RawValue([4294967293, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.038207Z TRACE pod2_new_solver::engine: delivering answer to waiter pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-3), raw: RawValue([4294967293, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.038261Z DEBUG pod2_new_solver::engine: table marked complete and waiters pruned pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-3), raw: RawValue([4294967293, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.038266Z TRACE pod2_new_solver::engine: dequeued frame frame_id=40 goals=1 export=true
2025-09-08T11:47:36.038348Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even")
2025-09-08T11:47:36.038358Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 9 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }]
2025-09-08T11:47:36.038362Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.038371Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 1 }), args: [Wildcard(Wildcard { name: "N", index: 9 })] }]
2025-09-08T11:47:36.038378Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.038381Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("even", [Some(RawOrdValue(Value { typed: Int(-4), raw: RawValue([4294967292, 4294967295, 0, 0]) }))])
2025-09-08T11:47:36.038465Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=40
2025-09-08T11:47:36.038469Z TRACE pod2_new_solver::engine: dequeued frame frame_id=42 goals=1 export=false
2025-09-08T11:47:36.038508Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even_step")
2025-09-08T11:47:36.038519Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even_step") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 0 }), args: [Wildcard(Wildcard { name: "N", index: 9 }), Wildcard(Wildcard { name: "M", index: 10 })] }, StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 3 }), args: [Wildcard(Wildcard { name: "M", index: 10 })] }]
2025-09-08T11:47:36.038536Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.038538Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("even_step", [Some(RawOrdValue(Value { typed: Int(-4), raw: RawValue([4294967292, 4294967295, 0, 0]) }))])
2025-09-08T11:47:36.038590Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=42
2025-09-08T11:47:36.038595Z TRACE pod2_new_solver::engine: dequeued frame frame_id=43 goals=2 export=false
2025-09-08T11:47:36.038677Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("dec")
2025-09-08T11:47:36.038689Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("dec") goals=[StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 9 }), Wildcard(Wildcard { name: "B", index: 10 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }]
2025-09-08T11:47:36.038693Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.038695Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-4), raw: RawValue([4294967292, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.038785Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=43
2025-09-08T11:47:36.038790Z TRACE pod2_new_solver::engine: dequeued frame frame_id=44 goals=1 export=false
2025-09-08T11:47:36.038793Z TRACE pod2_new_solver::engine: processing native goal pred=SumOf args=[Wildcard(Wildcard { name: "A", index: 9 }), Wildcard(Wildcard { name: "B", index: 10 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })]
2025-09-08T11:47:36.038800Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.038815Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.038826Z TRACE pod2_new_solver::engine: native goal outcome pred=SumOf choices=2 waits={10}
2025-09-08T11:47:36.038842Z TRACE pod2_new_solver::engine: dequeued frame frame_id=45 goals=0 export=false
2025-09-08T11:47:36.039475Z DEBUG pod2_new_solver::engine: inserted/extended table answer with new proof tag pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-4), raw: RawValue([4294967292, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.039519Z TRACE pod2_new_solver::engine: delivering answer to waiter pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-4), raw: RawValue([4294967292, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.039572Z DEBUG pod2_new_solver::engine: table marked complete and waiters pruned pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-4), raw: RawValue([4294967292, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.039577Z TRACE pod2_new_solver::engine: dequeued frame frame_id=46 goals=1 export=true
2025-09-08T11:47:36.039658Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("odd")
2025-09-08T11:47:36.039670Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("odd") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 0 }), args: [Wildcard(Wildcard { name: "N", index: 10 }), Wildcard(Wildcard { name: "M", index: 11 })] }, StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 2 }), args: [Wildcard(Wildcard { name: "M", index: 11 })] }]
2025-09-08T11:47:36.039681Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.039683Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("odd", [Some(RawOrdValue(Value { typed: Int(-5), raw: RawValue([4294967291, 4294967295, 0, 0]) }))])
2025-09-08T11:47:36.039768Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=46
2025-09-08T11:47:36.039773Z TRACE pod2_new_solver::engine: dequeued frame frame_id=47 goals=2 export=false
2025-09-08T11:47:36.039854Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("dec")
2025-09-08T11:47:36.039866Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("dec") goals=[StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 10 }), Wildcard(Wildcard { name: "B", index: 11 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }]
2025-09-08T11:47:36.039870Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.039872Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-5), raw: RawValue([4294967291, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.039958Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=47
2025-09-08T11:47:36.039962Z TRACE pod2_new_solver::engine: dequeued frame frame_id=48 goals=1 export=false
2025-09-08T11:47:36.039965Z TRACE pod2_new_solver::engine: processing native goal pred=SumOf args=[Wildcard(Wildcard { name: "A", index: 10 }), Wildcard(Wildcard { name: "B", index: 11 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })]
2025-09-08T11:47:36.039973Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.039989Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.040000Z TRACE pod2_new_solver::engine: native goal outcome pred=SumOf choices=2 waits={11}
2025-09-08T11:47:36.040016Z TRACE pod2_new_solver::engine: dequeued frame frame_id=49 goals=0 export=false
2025-09-08T11:47:36.040777Z DEBUG pod2_new_solver::engine: inserted/extended table answer with new proof tag pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-5), raw: RawValue([4294967291, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.040820Z TRACE pod2_new_solver::engine: delivering answer to waiter pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-5), raw: RawValue([4294967291, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.040875Z DEBUG pod2_new_solver::engine: table marked complete and waiters pruned pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-5), raw: RawValue([4294967291, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.040880Z TRACE pod2_new_solver::engine: dequeued frame frame_id=50 goals=1 export=true
2025-09-08T11:47:36.040922Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even")
2025-09-08T11:47:36.040933Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 11 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }]
2025-09-08T11:47:36.040937Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.040950Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 1 }), args: [Wildcard(Wildcard { name: "N", index: 11 })] }]
2025-09-08T11:47:36.040957Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.040960Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("even", [Some(RawOrdValue(Value { typed: Int(-6), raw: RawValue([4294967290, 4294967295, 0, 0]) }))])
2025-09-08T11:47:36.041003Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=50
2025-09-08T11:47:36.041008Z TRACE pod2_new_solver::engine: dequeued frame frame_id=52 goals=1 export=false
2025-09-08T11:47:36.041059Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even_step")
2025-09-08T11:47:36.041072Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even_step") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 0 }), args: [Wildcard(Wildcard { name: "N", index: 11 }), Wildcard(Wildcard { name: "M", index: 12 })] }, StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 3 }), args: [Wildcard(Wildcard { name: "M", index: 12 })] }]
2025-09-08T11:47:36.041084Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.041087Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("even_step", [Some(RawOrdValue(Value { typed: Int(-6), raw: RawValue([4294967290, 4294967295, 0, 0]) }))])
2025-09-08T11:47:36.041143Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=52
2025-09-08T11:47:36.041147Z TRACE pod2_new_solver::engine: dequeued frame frame_id=53 goals=2 export=false
2025-09-08T11:47:36.041232Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("dec")
2025-09-08T11:47:36.041245Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("dec") goals=[StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 11 }), Wildcard(Wildcard { name: "B", index: 12 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }]
2025-09-08T11:47:36.041249Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.041251Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-6), raw: RawValue([4294967290, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.041338Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=53
2025-09-08T11:47:36.041342Z TRACE pod2_new_solver::engine: dequeued frame frame_id=54 goals=1 export=false
2025-09-08T11:47:36.041345Z TRACE pod2_new_solver::engine: processing native goal pred=SumOf args=[Wildcard(Wildcard { name: "A", index: 11 }), Wildcard(Wildcard { name: "B", index: 12 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })]
2025-09-08T11:47:36.041353Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.041370Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.041382Z TRACE pod2_new_solver::engine: native goal outcome pred=SumOf choices=2 waits={12}
2025-09-08T11:47:36.041399Z TRACE pod2_new_solver::engine: dequeued frame frame_id=55 goals=0 export=false
2025-09-08T11:47:36.041954Z DEBUG pod2_new_solver::engine: inserted/extended table answer with new proof tag pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-6), raw: RawValue([4294967290, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.041997Z TRACE pod2_new_solver::engine: delivering answer to waiter pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-6), raw: RawValue([4294967290, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.042051Z DEBUG pod2_new_solver::engine: table marked complete and waiters pruned pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-6), raw: RawValue([4294967290, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.042057Z TRACE pod2_new_solver::engine: dequeued frame frame_id=56 goals=1 export=true
2025-09-08T11:47:36.042160Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("odd")
2025-09-08T11:47:36.042172Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("odd") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 0 }), args: [Wildcard(Wildcard { name: "N", index: 12 }), Wildcard(Wildcard { name: "M", index: 13 })] }, StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 2 }), args: [Wildcard(Wildcard { name: "M", index: 13 })] }]
2025-09-08T11:47:36.042183Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.042186Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("odd", [Some(RawOrdValue(Value { typed: Int(-7), raw: RawValue([4294967289, 4294967295, 0, 0]) }))])
2025-09-08T11:47:36.042293Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=56
2025-09-08T11:47:36.042298Z TRACE pod2_new_solver::engine: dequeued frame frame_id=57 goals=2 export=false
2025-09-08T11:47:36.042381Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("dec")
2025-09-08T11:47:36.042394Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("dec") goals=[StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 12 }), Wildcard(Wildcard { name: "B", index: 13 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }]
2025-09-08T11:47:36.042398Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.042400Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-7), raw: RawValue([4294967289, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.042487Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=57
2025-09-08T11:47:36.042491Z TRACE pod2_new_solver::engine: dequeued frame frame_id=58 goals=1 export=false
2025-09-08T11:47:36.042494Z TRACE pod2_new_solver::engine: processing native goal pred=SumOf args=[Wildcard(Wildcard { name: "A", index: 12 }), Wildcard(Wildcard { name: "B", index: 13 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })]
2025-09-08T11:47:36.042503Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.042521Z TRACE pod2_new_solver::handlers::ternary: Ternary: start op="SumOf"
2025-09-08T11:47:36.042534Z TRACE pod2_new_solver::engine: native goal outcome pred=SumOf choices=2 waits={13}
2025-09-08T11:47:36.042553Z TRACE pod2_new_solver::engine: dequeued frame frame_id=59 goals=0 export=false
2025-09-08T11:47:36.043201Z DEBUG pod2_new_solver::engine: inserted/extended table answer with new proof tag pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-7), raw: RawValue([4294967289, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.043244Z TRACE pod2_new_solver::engine: delivering answer to waiter pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-7), raw: RawValue([4294967289, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.043299Z DEBUG pod2_new_solver::engine: table marked complete and waiters pruned pat=CallPattern("dec", [Some(RawOrdValue(Value { typed: Int(-7), raw: RawValue([4294967289, 4294967295, 0, 0]) })), None])
2025-09-08T11:47:36.043305Z TRACE pod2_new_solver::engine: dequeued frame frame_id=60 goals=1 export=true
2025-09-08T11:47:36.043353Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even")
2025-09-08T11:47:36.043366Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 13 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }]
2025-09-08T11:47:36.043369Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.043380Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 1 }), args: [Wildcard(Wildcard { name: "N", index: 13 })] }]
2025-09-08T11:47:36.043387Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
2025-09-08T11:47:36.043390Z TRACE pod2_new_solver::engine: registering waiter for custom call pattern=CallPattern("even", [Some(RawOrdValue(Value { typed: Int(-8), raw: RawValue([4294967288, 4294967295, 0, 0]) }))])
2025-09-08T11:47:36.043443Z DEBUG pod2_new_solver::engine: dropping frame: no choices and no suspends frame_id=60
2025-09-08T11:47:36.043448Z TRACE pod2_new_solver::engine: dequeued frame frame_id=62 goals=1 export=false
2025-09-08T11:47:36.043508Z DEBUG pod2_new_solver::engine: creating new table and spawning producers predicate=CustomPredicateRef("even_step")
2025-09-08T11:47:36.043522Z TRACE pod2_new_solver::engine: spawned producer goals pred=CustomPredicateRef("even_step") goals=[StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 0 }), args: [Wildcard(Wildcard { name: "N", index: 13 }), Wildcard(Wildcard { name: "M", index: 14 })] }, StatementTmpl { pred: Custom(CustomPredicateRef { batch: CustomPredicateBatch { id: Hash([1437510537502025901, 7406124726250487495, 279802903624284866, 8394754932447776890]), name: "PodlangBatch", predicates: [CustomPredicate { name: "dec", conjunction: true, statements: [StatementTmpl { pred: Native(SumOf), args: [Wildcard(Wildcard { name: "A", index: 0 }), Wildcard(Wildcard { name: "B", index: 1 }), Literal(Value { typed: Int(1), raw: RawValue([1, 0, 0, 0]) })] }], args_len: 2, wildcard_names: ["A", "B"] }, CustomPredicate { name: "even_step", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(3), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }, CustomPredicate { name: "even", conjunction: false, statements: [StatementTmpl { pred: Native(Equal), args: [Wildcard(Wildcard { name: "N", index: 0 }), Literal(Value { typed: Int(0), raw: RawValue([0, 0, 0, 0]) })] }, StatementTmpl { pred: BatchSelf(1), args: [Wildcard(Wildcard { name: "N", index: 0 })] }], args_len: 1, wildcard_names: ["N"] }, CustomPredicate { name: "odd", conjunction: true, statements: [StatementTmpl { pred: BatchSelf(0), args: [Wildcard(Wildcard { name: "N", index: 0 }), Wildcard(Wildcard { name: "M", index: 1 })] }, StatementTmpl { pred: BatchSelf(2), args: [Wildcard(Wildcard { name: "M", index: 1 })] }], args_len: 1, wildcard_names: ["N", "M"] }] }, index: 3 }), args: [Wildcard(Wildcard { name: "M", index: 14 })] }]
2025-09-08T11:47:36.043534Z TRACE pod2_new_solver::engine: enqueuing rule-body producer
