/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as FrogcryptoRouteImport } from './routes/frogcrypto'
import { Route as EditorRouteImport } from './routes/editor'
import { Route as DebugRouteImport } from './routes/debug'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PodsIndexRouteImport } from './routes/pods/index'
import { Route as DocumentsIndexRouteImport } from './routes/documents/index'
import { Route as DocumentsPublishRouteImport } from './routes/documents/publish'
import { Route as DocumentsDraftsRouteImport } from './routes/documents/drafts'
import { Route as DocumentsDocumentDocumentIdRouteImport } from './routes/documents/document/$documentId'
import { Route as DocumentsDocumentDocumentIdEditRouteImport } from './routes/documents/document_.$documentId.edit'

const FrogcryptoRoute = FrogcryptoRouteImport.update({
  id: '/frogcrypto',
  path: '/frogcrypto',
  getParentRoute: () => rootRouteImport,
} as any)
const EditorRoute = EditorRouteImport.update({
  id: '/editor',
  path: '/editor',
  getParentRoute: () => rootRouteImport,
} as any)
const DebugRoute = DebugRouteImport.update({
  id: '/debug',
  path: '/debug',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PodsIndexRoute = PodsIndexRouteImport.update({
  id: '/pods/',
  path: '/pods/',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentsIndexRoute = DocumentsIndexRouteImport.update({
  id: '/documents/',
  path: '/documents/',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentsPublishRoute = DocumentsPublishRouteImport.update({
  id: '/documents/publish',
  path: '/documents/publish',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentsDraftsRoute = DocumentsDraftsRouteImport.update({
  id: '/documents/drafts',
  path: '/documents/drafts',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentsDocumentDocumentIdRoute =
  DocumentsDocumentDocumentIdRouteImport.update({
    id: '/documents/document/$documentId',
    path: '/documents/document/$documentId',
    getParentRoute: () => rootRouteImport,
  } as any)
const DocumentsDocumentDocumentIdEditRoute =
  DocumentsDocumentDocumentIdEditRouteImport.update({
    id: '/documents/document_/$documentId/edit',
    path: '/documents/document/$documentId/edit',
    getParentRoute: () => rootRouteImport,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/debug': typeof DebugRoute
  '/editor': typeof EditorRoute
  '/frogcrypto': typeof FrogcryptoRoute
  '/documents/drafts': typeof DocumentsDraftsRoute
  '/documents/publish': typeof DocumentsPublishRoute
  '/documents': typeof DocumentsIndexRoute
  '/pods': typeof PodsIndexRoute
  '/documents/document/$documentId': typeof DocumentsDocumentDocumentIdRoute
  '/documents/document/$documentId/edit': typeof DocumentsDocumentDocumentIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/debug': typeof DebugRoute
  '/editor': typeof EditorRoute
  '/frogcrypto': typeof FrogcryptoRoute
  '/documents/drafts': typeof DocumentsDraftsRoute
  '/documents/publish': typeof DocumentsPublishRoute
  '/documents': typeof DocumentsIndexRoute
  '/pods': typeof PodsIndexRoute
  '/documents/document/$documentId': typeof DocumentsDocumentDocumentIdRoute
  '/documents/document/$documentId/edit': typeof DocumentsDocumentDocumentIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/debug': typeof DebugRoute
  '/editor': typeof EditorRoute
  '/frogcrypto': typeof FrogcryptoRoute
  '/documents/drafts': typeof DocumentsDraftsRoute
  '/documents/publish': typeof DocumentsPublishRoute
  '/documents/': typeof DocumentsIndexRoute
  '/pods/': typeof PodsIndexRoute
  '/documents/document/$documentId': typeof DocumentsDocumentDocumentIdRoute
  '/documents/document_/$documentId/edit': typeof DocumentsDocumentDocumentIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/debug'
    | '/editor'
    | '/frogcrypto'
    | '/documents/drafts'
    | '/documents/publish'
    | '/documents'
    | '/pods'
    | '/documents/document/$documentId'
    | '/documents/document/$documentId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/debug'
    | '/editor'
    | '/frogcrypto'
    | '/documents/drafts'
    | '/documents/publish'
    | '/documents'
    | '/pods'
    | '/documents/document/$documentId'
    | '/documents/document/$documentId/edit'
  id:
    | '__root__'
    | '/'
    | '/debug'
    | '/editor'
    | '/frogcrypto'
    | '/documents/drafts'
    | '/documents/publish'
    | '/documents/'
    | '/pods/'
    | '/documents/document/$documentId'
    | '/documents/document_/$documentId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DebugRoute: typeof DebugRoute
  EditorRoute: typeof EditorRoute
  FrogcryptoRoute: typeof FrogcryptoRoute
  DocumentsDraftsRoute: typeof DocumentsDraftsRoute
  DocumentsPublishRoute: typeof DocumentsPublishRoute
  DocumentsIndexRoute: typeof DocumentsIndexRoute
  PodsIndexRoute: typeof PodsIndexRoute
  DocumentsDocumentDocumentIdRoute: typeof DocumentsDocumentDocumentIdRoute
  DocumentsDocumentDocumentIdEditRoute: typeof DocumentsDocumentDocumentIdEditRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/frogcrypto': {
      id: '/frogcrypto'
      path: '/frogcrypto'
      fullPath: '/frogcrypto'
      preLoaderRoute: typeof FrogcryptoRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/editor': {
      id: '/editor'
      path: '/editor'
      fullPath: '/editor'
      preLoaderRoute: typeof EditorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/debug': {
      id: '/debug'
      path: '/debug'
      fullPath: '/debug'
      preLoaderRoute: typeof DebugRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pods/': {
      id: '/pods/'
      path: '/pods'
      fullPath: '/pods'
      preLoaderRoute: typeof PodsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/documents/': {
      id: '/documents/'
      path: '/documents'
      fullPath: '/documents'
      preLoaderRoute: typeof DocumentsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/documents/publish': {
      id: '/documents/publish'
      path: '/documents/publish'
      fullPath: '/documents/publish'
      preLoaderRoute: typeof DocumentsPublishRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/documents/drafts': {
      id: '/documents/drafts'
      path: '/documents/drafts'
      fullPath: '/documents/drafts'
      preLoaderRoute: typeof DocumentsDraftsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/documents/document/$documentId': {
      id: '/documents/document/$documentId'
      path: '/documents/document/$documentId'
      fullPath: '/documents/document/$documentId'
      preLoaderRoute: typeof DocumentsDocumentDocumentIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/documents/document_/$documentId/edit': {
      id: '/documents/document_/$documentId/edit'
      path: '/documents/document/$documentId/edit'
      fullPath: '/documents/document/$documentId/edit'
      preLoaderRoute: typeof DocumentsDocumentDocumentIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DebugRoute: DebugRoute,
  EditorRoute: EditorRoute,
  FrogcryptoRoute: FrogcryptoRoute,
  DocumentsDraftsRoute: DocumentsDraftsRoute,
  DocumentsPublishRoute: DocumentsPublishRoute,
  DocumentsIndexRoute: DocumentsIndexRoute,
  PodsIndexRoute: PodsIndexRoute,
  DocumentsDocumentDocumentIdRoute: DocumentsDocumentDocumentIdRoute,
  DocumentsDocumentDocumentIdEditRoute: DocumentsDocumentDocumentIdEditRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
