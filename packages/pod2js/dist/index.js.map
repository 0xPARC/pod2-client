{"version":3,"file":"index.js","names":["data: any","mainPodValidator: ValidateFunction<MainPod> | undefined","signedPodValidator: ValidateFunction<SignedPod> | undefined","schema"],"sources":["../src/schemas.json","../src/index.ts"],"sourcesContent":["{\n  \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\n  \"title\": \"SchemaContainer\",\n  \"type\": \"object\",\n  \"required\": [\"mainpod\", \"pod_info\", \"signedpod\", \"space_info\"],\n  \"properties\": {\n    \"mainpod\": {\n      \"$ref\": \"#/definitions/MainPod\"\n    },\n    \"pod_info\": {\n      \"$ref\": \"#/definitions/PodInfo\"\n    },\n    \"signedpod\": {\n      \"$ref\": \"#/definitions/SignedPod\"\n    },\n    \"space_info\": {\n      \"$ref\": \"#/definitions/SpaceInfo\"\n    }\n  },\n  \"definitions\": {\n    \"AnchoredKey\": {\n      \"type\": \"object\",\n      \"required\": [\"key\", \"podId\"],\n      \"properties\": {\n        \"key\": {\n          \"$ref\": \"#/definitions/Key\"\n        },\n        \"podId\": {\n          \"$ref\": \"#/definitions/PodId\"\n        }\n      }\n    },\n    \"Array\": {\n      \"description\": \"Array: the elements are placed at the value field of each leaf, and the key field is just the array index (integer). leaf.key=i leaf.value=original_value\",\n      \"type\": \"object\",\n      \"required\": [\"array\", \"max_depth\"],\n      \"properties\": {\n        \"array\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Value\"\n          }\n        },\n        \"max_depth\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        }\n      }\n    },\n    \"CustomPredicate\": {\n      \"description\": \"NOTE: fields are not public (outside of crate) to enforce the struct instantiation through the `::and/or` methods, which performs checks on the values.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"argsLen\",\n        \"conjunction\",\n        \"name\",\n        \"statements\",\n        \"wildcardNames\"\n      ],\n      \"properties\": {\n        \"argsLen\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"conjunction\": {\n          \"description\": \"true for \\\"and\\\", false for \\\"or\\\"\",\n          \"type\": \"boolean\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"statements\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/StatementTmpl\"\n          }\n        },\n        \"wildcardNames\": {\n          \"description\": \"Names of the wildcards, the first `args_len` entries correspond to the `args_len` arguments of the custom predicate.\",\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    },\n    \"CustomPredicateBatch\": {\n      \"type\": \"object\",\n      \"required\": [\"id\", \"name\", \"predicates\"],\n      \"properties\": {\n        \"id\": {\n          \"$ref\": \"#/definitions/Hash\"\n        },\n        \"name\": {\n          \"type\": \"string\"\n        },\n        \"predicates\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/CustomPredicate\"\n          }\n        }\n      }\n    },\n    \"CustomPredicateRef\": {\n      \"type\": \"object\",\n      \"required\": [\"batch\", \"index\"],\n      \"properties\": {\n        \"batch\": {\n          \"$ref\": \"#/definitions/CustomPredicateBatch\"\n        },\n        \"index\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        }\n      }\n    },\n    \"Dictionary\": {\n      \"description\": \"Dictionary: the user original keys and values are hashed to be used in the leaf. leaf.key=hash(original_key) leaf.value=hash(original_value)\",\n      \"type\": \"object\",\n      \"required\": [\"kvs\", \"max_depth\"],\n      \"properties\": {\n        \"kvs\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"$ref\": \"#/definitions/Value\"\n          }\n        },\n        \"max_depth\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        }\n      }\n    },\n    \"Hash\": {\n      \"type\": \"string\",\n      \"pattern\": \"^[0-9a-fA-F]{64}$\"\n    },\n    \"Key\": {\n      \"type\": \"string\"\n    },\n    \"MainPod\": {\n      \"type\": \"object\",\n      \"required\": [\n        \"data\",\n        \"id\",\n        \"params\",\n        \"podType\",\n        \"publicStatements\",\n        \"vdSet\"\n      ],\n      \"properties\": {\n        \"data\": true,\n        \"id\": {\n          \"$ref\": \"#/definitions/PodId\"\n        },\n        \"params\": {\n          \"$ref\": \"#/definitions/Params\"\n        },\n        \"podType\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"integer\",\n              \"format\": \"uint\",\n              \"minimum\": 0.0\n            },\n            {\n              \"type\": \"string\"\n            }\n          ],\n          \"maxItems\": 2,\n          \"minItems\": 2\n        },\n        \"publicStatements\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Statement\"\n          }\n        },\n        \"vdSet\": {\n          \"$ref\": \"#/definitions/VDSet\"\n        }\n      }\n    },\n    \"NativePredicate\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"None\",\n        \"False\",\n        \"Equal\",\n        \"NotEqual\",\n        \"LtEq\",\n        \"Lt\",\n        \"Contains\",\n        \"NotContains\",\n        \"SumOf\",\n        \"ProductOf\",\n        \"MaxOf\",\n        \"HashOf\",\n        \"DictContains\",\n        \"DictNotContains\",\n        \"SetContains\",\n        \"SetNotContains\",\n        \"ArrayContains\",\n        \"GtEq\",\n        \"Gt\"\n      ]\n    },\n    \"Params\": {\n      \"description\": \"Params: non dynamic parameters that define the circuit.\",\n      \"type\": \"object\",\n      \"required\": [\n        \"maxCustomBatchSize\",\n        \"maxCustomPredicateArity\",\n        \"maxCustomPredicateBatches\",\n        \"maxCustomPredicateVerifications\",\n        \"maxCustomPredicateWildcards\",\n        \"maxDepthMtContainers\",\n        \"maxDepthMtVds\",\n        \"maxInputPodsPublicStatements\",\n        \"maxInputRecursivePods\",\n        \"maxInputSignedPods\",\n        \"maxMerkleProofsContainers\",\n        \"maxOperationArgs\",\n        \"maxPublicStatements\",\n        \"maxSignedPodValues\",\n        \"maxStatementArgs\",\n        \"maxStatements\",\n        \"numPublicStatementsId\"\n      ],\n      \"properties\": {\n        \"maxCustomBatchSize\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxCustomPredicateArity\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxCustomPredicateBatches\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxCustomPredicateVerifications\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxCustomPredicateWildcards\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxDepthMtContainers\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxDepthMtVds\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxInputPodsPublicStatements\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxInputRecursivePods\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxInputSignedPods\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxMerkleProofsContainers\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxOperationArgs\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxPublicStatements\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxSignedPodValues\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxStatementArgs\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"maxStatements\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"numPublicStatementsId\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        }\n      }\n    },\n    \"PodData\": {\n      \"oneOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\"pod_data_payload\", \"pod_data_variant\"],\n          \"properties\": {\n            \"pod_data_payload\": {\n              \"$ref\": \"#/definitions/SignedPod\"\n            },\n            \"pod_data_variant\": {\n              \"type\": \"string\",\n              \"enum\": [\"Signed\"]\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"pod_data_payload\", \"pod_data_variant\"],\n          \"properties\": {\n            \"pod_data_payload\": {\n              \"$ref\": \"#/definitions/MainPod\"\n            },\n            \"pod_data_variant\": {\n              \"type\": \"string\",\n              \"enum\": [\"Main\"]\n            }\n          }\n        }\n      ]\n    },\n    \"PodId\": {\n      \"$ref\": \"#/definitions/Hash\"\n    },\n    \"PodInfo\": {\n      \"type\": \"object\",\n      \"required\": [\"created_at\", \"data\", \"id\", \"pod_type\", \"space\"],\n      \"properties\": {\n        \"created_at\": {\n          \"type\": \"string\"\n        },\n        \"data\": {\n          \"$ref\": \"#/definitions/PodData\"\n        },\n        \"id\": {\n          \"type\": \"string\"\n        },\n        \"label\": {\n          \"type\": [\"string\", \"null\"]\n        },\n        \"pod_type\": {\n          \"type\": \"string\"\n        },\n        \"space\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Predicate\": {\n      \"oneOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\"type\", \"value\"],\n          \"properties\": {\n            \"type\": {\n              \"type\": \"string\",\n              \"enum\": [\"Native\"]\n            },\n            \"value\": {\n              \"$ref\": \"#/definitions/NativePredicate\"\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"type\", \"value\"],\n          \"properties\": {\n            \"type\": {\n              \"type\": \"string\",\n              \"enum\": [\"BatchSelf\"]\n            },\n            \"value\": {\n              \"type\": \"integer\",\n              \"format\": \"uint\",\n              \"minimum\": 0.0\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"type\", \"value\"],\n          \"properties\": {\n            \"type\": {\n              \"type\": \"string\",\n              \"enum\": [\"Custom\"]\n            },\n            \"value\": {\n              \"$ref\": \"#/definitions/CustomPredicateRef\"\n            }\n          }\n        }\n      ]\n    },\n    \"RawValue\": {\n      \"type\": \"string\",\n      \"pattern\": \"^[0-9a-fA-F]{64}$\"\n    },\n    \"Set\": {\n      \"description\": \"Set: the value field of the leaf is unused, and the key contains the hash of the element. leaf.key=hash(original_value) leaf.value=0\",\n      \"type\": \"object\",\n      \"required\": [\"max_depth\", \"set\"],\n      \"properties\": {\n        \"max_depth\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"set\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Value\"\n          },\n          \"uniqueItems\": true\n        }\n      }\n    },\n    \"SignedPod\": {\n      \"type\": \"object\",\n      \"required\": [\"data\", \"entries\", \"id\", \"podType\"],\n      \"properties\": {\n        \"data\": true,\n        \"entries\": {\n          \"type\": \"object\",\n          \"additionalProperties\": {\n            \"$ref\": \"#/definitions/Value\"\n          }\n        },\n        \"id\": {\n          \"$ref\": \"#/definitions/PodId\"\n        },\n        \"podType\": {\n          \"type\": \"array\",\n          \"items\": [\n            {\n              \"type\": \"integer\",\n              \"format\": \"uint\",\n              \"minimum\": 0.0\n            },\n            {\n              \"type\": \"string\"\n            }\n          ],\n          \"maxItems\": 2,\n          \"minItems\": 2\n        }\n      }\n    },\n    \"SpaceInfo\": {\n      \"type\": \"object\",\n      \"required\": [\"created_at\", \"id\"],\n      \"properties\": {\n        \"created_at\": {\n          \"type\": \"string\"\n        },\n        \"id\": {\n          \"type\": \"string\"\n        }\n      }\n    },\n    \"Statement\": {\n      \"description\": \"Type encapsulating statements with their associated arguments.\",\n      \"oneOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\"predicate\"],\n          \"properties\": {\n            \"predicate\": {\n              \"type\": \"string\",\n              \"enum\": [\"None\"]\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"args\", \"predicate\"],\n          \"properties\": {\n            \"args\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                }\n              ],\n              \"maxItems\": 2,\n              \"minItems\": 2\n            },\n            \"predicate\": {\n              \"type\": \"string\",\n              \"enum\": [\"Equal\"]\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"args\", \"predicate\"],\n          \"properties\": {\n            \"args\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                }\n              ],\n              \"maxItems\": 2,\n              \"minItems\": 2\n            },\n            \"predicate\": {\n              \"type\": \"string\",\n              \"enum\": [\"NotEqual\"]\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"args\", \"predicate\"],\n          \"properties\": {\n            \"args\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                }\n              ],\n              \"maxItems\": 2,\n              \"minItems\": 2\n            },\n            \"predicate\": {\n              \"type\": \"string\",\n              \"enum\": [\"LtEq\"]\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"args\", \"predicate\"],\n          \"properties\": {\n            \"args\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                }\n              ],\n              \"maxItems\": 2,\n              \"minItems\": 2\n            },\n            \"predicate\": {\n              \"type\": \"string\",\n              \"enum\": [\"Lt\"]\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"args\", \"predicate\"],\n          \"properties\": {\n            \"args\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                }\n              ],\n              \"maxItems\": 3,\n              \"minItems\": 3\n            },\n            \"predicate\": {\n              \"type\": \"string\",\n              \"enum\": [\"Contains\"]\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"args\", \"predicate\"],\n          \"properties\": {\n            \"args\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                }\n              ],\n              \"maxItems\": 2,\n              \"minItems\": 2\n            },\n            \"predicate\": {\n              \"type\": \"string\",\n              \"enum\": [\"NotContains\"]\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"args\", \"predicate\"],\n          \"properties\": {\n            \"args\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                }\n              ],\n              \"maxItems\": 3,\n              \"minItems\": 3\n            },\n            \"predicate\": {\n              \"type\": \"string\",\n              \"enum\": [\"SumOf\"]\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"args\", \"predicate\"],\n          \"properties\": {\n            \"args\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                }\n              ],\n              \"maxItems\": 3,\n              \"minItems\": 3\n            },\n            \"predicate\": {\n              \"type\": \"string\",\n              \"enum\": [\"ProductOf\"]\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"args\", \"predicate\"],\n          \"properties\": {\n            \"args\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                }\n              ],\n              \"maxItems\": 3,\n              \"minItems\": 3\n            },\n            \"predicate\": {\n              \"type\": \"string\",\n              \"enum\": [\"MaxOf\"]\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"args\", \"predicate\"],\n          \"properties\": {\n            \"args\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                },\n                {\n                  \"$ref\": \"#/definitions/ValueRef\"\n                }\n              ],\n              \"maxItems\": 3,\n              \"minItems\": 3\n            },\n            \"predicate\": {\n              \"type\": \"string\",\n              \"enum\": [\"HashOf\"]\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"args\", \"predicate\"],\n          \"properties\": {\n            \"args\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"$ref\": \"#/definitions/CustomPredicateRef\"\n                },\n                {\n                  \"type\": \"array\",\n                  \"items\": {\n                    \"$ref\": \"#/definitions/Value\"\n                  }\n                }\n              ],\n              \"maxItems\": 2,\n              \"minItems\": 2\n            },\n            \"predicate\": {\n              \"type\": \"string\",\n              \"enum\": [\"Custom\"]\n            }\n          }\n        }\n      ]\n    },\n    \"StatementTmpl\": {\n      \"description\": \"Statement Template for a Custom Predicate\",\n      \"type\": \"object\",\n      \"required\": [\"args\", \"pred\"],\n      \"properties\": {\n        \"args\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/StatementTmplArg\"\n          }\n        },\n        \"pred\": {\n          \"$ref\": \"#/definitions/Predicate\"\n        }\n      }\n    },\n    \"StatementTmplArg\": {\n      \"oneOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\"type\"],\n          \"properties\": {\n            \"type\": {\n              \"type\": \"string\",\n              \"enum\": [\"None\"]\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"type\", \"value\"],\n          \"properties\": {\n            \"type\": {\n              \"type\": \"string\",\n              \"enum\": [\"Literal\"]\n            },\n            \"value\": {\n              \"$ref\": \"#/definitions/Value\"\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"type\", \"value\"],\n          \"properties\": {\n            \"type\": {\n              \"type\": \"string\",\n              \"enum\": [\"AnchoredKey\"]\n            },\n            \"value\": {\n              \"type\": \"array\",\n              \"items\": [\n                {\n                  \"$ref\": \"#/definitions/Wildcard\"\n                },\n                {\n                  \"$ref\": \"#/definitions/Key\"\n                }\n              ],\n              \"maxItems\": 2,\n              \"minItems\": 2\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"type\", \"value\"],\n          \"properties\": {\n            \"type\": {\n              \"type\": \"string\",\n              \"enum\": [\"Wildcard\"]\n            },\n            \"value\": {\n              \"$ref\": \"#/definitions/Wildcard\"\n            }\n          }\n        }\n      ]\n    },\n    \"VDSet\": {\n      \"description\": \"VDSet is the set of the allowed verifier_data hashes. When proving a MainPod, the circuit will enforce that all the used verifier_datas for verifying the recursive proofs of previous PODs appears in the VDSet. The VDSet struct that allows to get the specific merkle proofs for the given verifier_data.\",\n      \"type\": \"object\",\n      \"required\": [\"tree_depth\", \"vds_hashes\"],\n      \"properties\": {\n        \"tree_depth\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"vds_hashes\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"$ref\": \"#/definitions/Hash\"\n          }\n        }\n      }\n    },\n    \"Value\": {\n      \"description\": \"Represents various POD value types. Array, String, and Bool variants are represented untagged in JSON.\",\n      \"anyOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\"Int\"],\n          \"properties\": {\n            \"Int\": {\n              \"description\": \"An i64 represented as a string.\",\n              \"type\": \"string\"\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"Raw\"],\n          \"properties\": {\n            \"Raw\": {\n              \"$ref\": \"#/definitions/RawValue\"\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"PublicKey\"],\n          \"properties\": {\n            \"PublicKey\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        {\n          \"$ref\": \"#/definitions/Array\"\n        },\n        {\n          \"$ref\": \"#/definitions/Dictionary\"\n        },\n        {\n          \"type\": \"string\"\n        },\n        {\n          \"$ref\": \"#/definitions/Set\"\n        },\n        {\n          \"type\": \"boolean\"\n        }\n      ]\n    },\n    \"ValueRef\": {\n      \"oneOf\": [\n        {\n          \"type\": \"object\",\n          \"required\": [\"type\", \"value\"],\n          \"properties\": {\n            \"type\": {\n              \"type\": \"string\",\n              \"enum\": [\"Literal\"]\n            },\n            \"value\": {\n              \"$ref\": \"#/definitions/Value\"\n            }\n          }\n        },\n        {\n          \"type\": \"object\",\n          \"required\": [\"type\", \"value\"],\n          \"properties\": {\n            \"type\": {\n              \"type\": \"string\",\n              \"enum\": [\"Key\"]\n            },\n            \"value\": {\n              \"$ref\": \"#/definitions/AnchoredKey\"\n            }\n          }\n        }\n      ]\n    },\n    \"Wildcard\": {\n      \"type\": \"object\",\n      \"required\": [\"index\", \"name\"],\n      \"properties\": {\n        \"index\": {\n          \"type\": \"integer\",\n          \"format\": \"uint\",\n          \"minimum\": 0.0\n        },\n        \"name\": {\n          \"type\": \"string\"\n        }\n      }\n    }\n  }\n}\n","import { Ajv2019, type ValidateFunction } from \"ajv/dist/2019.js\";\nimport type { MainPod, SignedPod } from \"../generated/types/pod2.d.ts\";\nimport schema from \"./schemas.json\" with { type: \"json\" };\n\nexport type * from \"../generated/types/pod2.d.ts\";\n\nconst ajv = new Ajv2019({ allErrors: true, strict: false });\n\ntype Result<T> =\n  | {\n      success: true;\n      pod: T;\n    }\n  | {\n      success: false;\n      errors: Ajv2019[\"errors\"];\n    };\n\nexport function validateMainPod(data: any): Result<MainPod> {\n  if (!mainPodValidator) {\n    setupValidators();\n  }\n  if (mainPodValidator && mainPodValidator(data)) {\n    return {\n      success: true,\n      pod: data\n    };\n  }\n  return {\n    success: false,\n    errors: ajv.errors\n  };\n}\n\nexport function validateSignedPod(data: any): Result<SignedPod> {\n  if (!signedPodValidator) {\n    setupValidators();\n  }\n  if (signedPodValidator && signedPodValidator(data)) {\n    return {\n      success: true,\n      pod: data\n    };\n  }\n  return {\n    success: false,\n    errors: ajv.errors\n  };\n}\n\nlet mainPodValidator: ValidateFunction<MainPod> | undefined;\nlet signedPodValidator: ValidateFunction<SignedPod> | undefined;\n\nfunction setupValidators() {\n  // --- AJV Setup ---\n\n  try {\n    ajv.compile(schema);\n    mainPodValidator = ajv.getSchema<MainPod>(\"#/definitions/MainPod\");\n    signedPodValidator = ajv.getSchema<SignedPod>(\"#/definitions/SignedPod\");\n\n    if (!mainPodValidator) {\n      throw new Error(\"Could not get validator for MainPod\");\n    }\n    if (!signedPodValidator) {\n      throw new Error(\"Could not get validator for SignedPod\");\n    }\n  } catch (e) {\n    console.error(\"Failed to compile AJV schemas:\", e);\n    throw e;\n  }\n}\n"],"mappings":"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"}