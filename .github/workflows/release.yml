name: Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Run without creating release (test mode)"
        required: false
        default: false
        type: boolean

jobs:
  # Require all existing CI workflows to pass before release
  check-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Check CI status
        uses: actions/github-script@v7
        with:
          script: |
            const workflows = [
              { name: 'Clippy Check', file: 'clippy.yml' },
              { name: 'Rust Tests', file: 'rust_tests.yml' },
              { name: 'JS Tests', file: 'js_tests.yml' },
              { name: 'Rustfmt Check', file: 'rustfmt.yml' }
            ];

            for (const workflow of workflows) {
              const runs = await github.rest.actions.listWorkflowRunsForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: workflow.file,
                head_sha: context.sha,
                status: 'completed'
              });

              const latestRun = runs.data.workflow_runs[0];
              if (!latestRun || latestRun.conclusion !== 'success') {
                core.setFailed(`Workflow "${workflow.name}" has not passed for this commit`);
                return;
              }
            }

  release:
    #needs: check-ci
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
          - platform: "ubuntu-latest"
            args: ""
          - platform: "windows-latest"
            args: ""

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly-2025-01-20

      - name: Add Rust target (macOS only)
        if: matrix.platform == 'macos-latest'
        run: rustup target add aarch64-apple-darwin x86_64-apple-darwin

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10.8.1

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm build

      - name: Build PodNet CLI
        run: cargo build --release --bin podnet-cli

      - name: Prepare CLI binary for upload
        shell: bash
        run: |
          mkdir -p cli-dist
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            cp target/release/podnet-cli.exe cli-dist/
          else
            cp target/release/podnet-cli cli-dist/
          fi

      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0
        env:
          NO_STRIP: true
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Ad-hoc signing for macOS builds (temporary until Apple Developer account is obtained)
          APPLE_SIGNING_IDENTITY: ${{ matrix.platform == 'macos-latest' && '-' || '' }}
        with:
          projectPath: apps/client
          tagName: ${{ github.ref_name }}
          releaseName: "POD Client ${{ github.ref_name }}"
          args: ${{ matrix.args }}
          includeDebug: false
          updaterJsonPreferNsis: false
          releaseBody: |
            Release ${{ github.ref_name }} - See the assets below to download this version and install.

            ## What's Included

            - **POD2 Desktop Client** - Tauri-based desktop application for managing POD collections
            - **PodNet CLI** - Command-line tool for publishing and upvoting content on PodNet

            ## Installation Notes

            ### POD2 Desktop Client

            #### macOS
            The macOS application is ad-hoc signed. On first launch, you may see a security warning. To run the app:
            1. Right-click the app in Applications folder
            2. Select "Open" from the context menu
            3. Click "Open" in the security dialog

            This is a one-time process. Subsequent launches will work normally.

            #### Windows & Linux
            No additional steps required for installation.

            ### PodNet CLI

            Download the CLI binary for your platform and make it executable:
            - Linux/macOS: `chmod +x podnet-cli && ./podnet-cli --help`
            - Windows: `podnet-cli.exe --help`
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          dryRun: ${{ inputs.dry_run }}

      - name: Upload CLI binary to release
        if: ${{ !inputs.dry_run }}
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          files: |
            cli-dist/podnet-cli*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
